import { Configuration, Tag, FileCard } from './models'

// to keep track of any elemetns generated by the extension
const GENERATED_ELEMENT_CLASS = 'sdx-generated-content'

// Responsible for querying and modifying the current page
// as well as creating DOM elements
class Page {
  private page: Document = document

  hasFileCards(): boolean {
    const fileCard = document.querySelector('.file-card')
    console.log({fileCard})
    return fileCard != null
  }

  getFileCards(): FileCard[] {
    return Array.from(this.page.querySelectorAll('.file-card'))
      .map((element: Element) => new FileCard(element))
  }
}

// responsible for creating DOM elements
class ExtensionElements {
  static createLoadingElement(): Element {
    const loadingElement = document.createElement('div')
    loadingElement.classList.add('spinner-border')
    loadingElement.classList.add('text-primary')
    loadingElement.role = 'status'

    const innerSpan = document.createElement('span')
    innerSpan.classList.add('sr-only')
    innerSpan.classList.add('sdx-generated-content')
    innerSpan.innerText = 'Loading...'

    loadingElement.appendChild(innerSpan)

    return loadingElement
  }

  static createTagElement(tag: Tag): Element {
    const tagElement = document.createElement('a')
    tagElement.href = `https://shibbydex.com/tag/${tag.slug}`
    tagElement.title = tag.description
    tagElement.innerText = tag.title

    tagElement.classList.add(GENERATED_ELEMENT_CLASS)
    tagElement.classList.add('badge')
    tagElement.classList.add('badge-light')
    tagElement.classList.add('pt-2')
    tagElement.classList.add('pb-2')
    tagElement.classList.add('mb-1')

    tagElement.style.margin = "5px"

    return tagElement
  }

  static createAliasElement(tag: Tag, alias: string): Element {
    const tagElement = document.createElement('a')
    tagElement.href = `https://shibbydex.com/tag/${tag.slug}`
    tagElement.title = tag.description
    tagElement.innerText = alias

    tagElement.classList.add(GENERATED_ELEMENT_CLASS)
    tagElement.classList.add('badge')
    tagElement.classList.add('badge-dark')
    tagElement.classList.add('pt-2')
    tagElement.classList.add('pb-2')
    tagElement.classList.add('mb-1')

    tagElement.style.margin = "5px"

    return tagElement
  }

  static createCardFooter(): HTMLElement {
    const footer = document.createElement('p')

    footer.classList.add('h4')
    footer.classList.add('col-12')
    footer.classList.add('card-text')
    footer.classList.add('text-center')
    footer.classList.add('text-light')
    footer.classList.add('sdx-generated-content')
    footer.classList.add('sdx-filecard-footer')

    footer.style.display = 'flex'
    footer.style.justifyContent = 'center'
    footer.style.margin = '15px'
    footer.style.flexWrap = 'wrap'

    return footer
  }

}


class ConfigurationForm {
  loadConfig(): Configuration {
    return new Configuration()
  }

}

export { Page, ExtensionElements }
